### Start of Generic ================================
### If you can, try to avoid using these
SYNTAX.generic.expected.0=Expected {0}
SYNTAX.generic.expected.expr=Expected an expression
SYNTAX.generic.expected.expr.got.0=Expected an expression, got {0} instead
SYNTAX.generic.expected.identifier=Expected an identifier
### ================================ End of Generic
### Start of Core ================================
SYNTAX.core.expected.stmt=Expected a statement
SYNTAX.core.expected.stmt.got.0=Expected a statement, got {0} instead
## Blocks
SYNTAX.core.block.expected.colon=Expected a colon to start a block of code
SYNTAX.core.block.expected.indent=Expected an indented block of code
## Depth
SYNTAX.core.depth.unexpected.dedent=Unexpected decrease in depth
SYNTAX.core.depth.unexpected.indent=Unexpected increase in depth
### ================================ End of Core
### Start of Expressions ================================
## Operations
# Unary
SYNTAX.expr.op.unary.expected.expr=Operation (unary) needs an expression to target
SYNTAX.expr.op.negation.expected.expr=Not / negation operation needs a target expression
## Dictionaries
SYNTAX.expr.dict.pair.expected.key=Expected a dictionary item
SYNTAX.expr.dict.pair.expected.colon-or-eq=Expected a colon or equals sign
SYNTAX.expr.dict.pair.expected.value=Expected the dictionary item's value
SYNTAX.expr.dict.expected.delimiter-or-end=Expected the end or continuation of the dictionary
## Outer Parenthesis
SYNTAX.expr.outer-par.expected.end=Expected a right parenthesis
## Set
SYNTAX.expr.set.expected.delimiter-or-end=Expected the end or continuation of the set
### ================================ End of Expressions
### Start of Statements ================================
## For (for)
SYNTAX.stmt.for.expected.identifier=Expected the loop variable identifier after "for"
SYNTAX.stmt.for.expected.in=Expected "in" after the loop variable identifier
SYNTAX.stmt.for.expected.expr=Expected an iterable expression after "in"
## Variables & properties (var, const)
SYNTAX.stmt.var.expected.type-hint.expected.identifier=Expected a type identifier after the variable type hint
SYNTAX.stmt.var.const.expected.value=Expected a value for the constant
SYNTAX.stmt.var.prop.expected.single-parameter-list=Expected the setter function parameter
SYNTAX.stmt.var.prop.expected.get-or-set=Expected a getter or setter
SYNTAX.stmt.var.prop.expected.indent=Expected an indent to start the property
SYNTAX.stmt.var.prop.double.get=A property can't have two getters
SYNTAX.stmt.var.prop.double.set=A property can't have two setters
## While
SYNTAX.stmt.while.expected.expr=Expected a conditional expression
## Function (func)
SYNTAX.stmt.func.expected.identifier=Expected the function name after "func"
SYNTAX.stmt.func.expected.parameter-list=Expected function parameters
# Function Parameter List
SYNTAX.stmt.func.param-list.expected.param=Expected a function parameter
SYNTAX.stmt.func.param-list.expected.delimiter-or-end=Expected the end or continuation of the parameter list
# Function Type Hint
SYNTAX.stmt.func.type-hint.expected.identifier=Expected a type identifier after the function's type hint
# Function Parameter Type Hint
SYNTAX.stmt.func.param.type-hint.expected.identifier=Expected a type identifier after the parameter type hint
# Function Parameter Default Value
SYNTAX.stmt.func.param.default.expected.expr=Expected an expression to use as the parameter's default value
## If (if)
# Conditional Part (if, elif)
SYNTAX.stmt.if.conditional.expected.expr=Expected a conditional expression after "if" or "elif"
### ================================ End of Statements